import telebot
import requests
from bs4 import BeautifulSoup as BS
from config import *
from db import *
from telebot import types
import datetime as dt

bot = telebot.TeleBot(token)
BotDB = BotDB()
btns = list(links.keys())


def get_horoscope(znak):
    r = requests.get(links[znak])
    html = BS(r.content, "html.parser")

    soup1 = html.select('h1')[0].text
    soup = html.select('p')
    return soup1, soup


def get_currency():
    r = requests.get("https://invest.yandex.ru/catalog/currency/")
    html = BS(r.content, "html.parser")
    a = html.find_all(class_="JGT__mSaFfXxcOb2oGto")
    b = html.find_all(class_="FKk_VD_UBO4sS_Tt6IHI")
    return [(a[0], b[0]), (a[1], b[1])]


if dt.datetime.now().hour == 9:
    for i in BotDB.get_id():
        if BotDB.get_znak(i[0]) in btns:
            bot.send_message(i[0], get_horoscope(BotDB.get_znak(i[0]))[0])
            for j in get_horoscope(BotDB.get_znak(i[0]))[1]:
                bot.send_message(i[0], j)
        else:
            bot.send_message(i[0], "–£ –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞, —á—Ç–æ–±—ã –µ—ë –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'")


@bot.message_handler(commands=["start"])
def welcome(message):
    bot.send_message(message.chat.id,
                     "{0.first_name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø".format(
                         message.from_user))
    if not BotDB.user_exists(message.chat.id):
        BotDB.add_user(message.chat.id, "welcome", "{0.first_name}".format(message.from_user),
                       message.from_user.username, "pass")
    else:
        BotDB.update_status(message.chat.id, "welcome")


@bot.message_handler(commands=["–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"])
def activate(message):
    bot.send_message(message.chat.id,
                     "{0.first_name}, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø".format(
                         message.from_user))
    if not BotDB.user_exists(message.chat.id):
        BotDB.add_user(message.chat.id, "welcome", "{0.first_name}".format(message.from_user),
                       message.from_user.username, "pass")
    else:
        BotDB.update_status(message.chat.id, "welcome")


@bot.message_handler(commands=["–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è"])
def cancel(message):
    BotDB.update_znak(message.chat.id, "pass")
    bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@bot.message_handler(content_types=["text"])
def chat(message):
    if message.text == "–ú–µ–Ω—é‚Ü©":
        BotDB.update_status(message.chat.id, "menu")
    if message.text == "–ì–æ—Ä–æ—Å–∫–æ–ø—ãü™ê":
        BotDB.update_status(message.chat.id, "horoscope")
    if message.text == "–ö—É—Ä—Å—ã –≤–∞–ª—é—Çüí∞":
        BotDB.update_status(message.chat.id, "curr")
    if message.text in btns:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        back = types.KeyboardButton(text="–ú–µ–Ω—é‚Ü©")
        markup.add(back)
        bot.send_message(message.chat.id, get_horoscope(message.text)[0])
        for i in get_horoscope(message.text)[1]:
            bot.send_message(message.chat.id, i.text, reply_markup=markup)
        BotDB.update_status(message.chat.id, "pass")

    if BotDB.get_status(message.chat.id) == "welcome":
        data = list(map(int, message.text.split(".")))
        if len(data) == 2 and 0 < data[0] < 32 and 0 < data[1] < 13:
            znak = "–û–≤–µ–Ω"
            if (21 <= data[0] <= 31 and data[1] == 3) or (data[1] == 4 and 1 <= data[0] <= 19):
                znak = btns[0]

            elif (data[0] >= 20 and data[0] <= 30 and data[1] == 4) or (
                    data[1] == 5 and data[0] >= 1 and data[0] <= 20):

                znak = btns[1]

            elif (data[0] >= 21 and data[0] <= 31 and data[1] == 5) or (
                    data[1] == 6 and data[0] >= 1 and data[0] <= 21):

                znak = btns[2]

            elif (data[0] >= 22 and data[0] <= 30 and data[1] == 6) or (
                    data[1] == 7 and data[0] >= 1 and data[0] <= 22):

                znak = btns[3]

            elif (data[0] >= 23 and data[0] <= 31 and data[1] == 7) or (
                    data[1] == 8 and data[0] >= 1 and data[0] <= 22):

                znak = btns[4]

            elif (data[0] >= 23 and data[0] <= 31 and data[1] == 8) or (
                    data[1] == 9 and data[0] >= 1 and data[0] <= 22):

                znak = btns[5]

            elif (data[0] >= 23 and data[0] <= 30 and data[1] == 9) or (
                    data[1] == 10 and data[0] >= 1 and data[0] <= 23):

                znak = btns[6]

            elif (24 <= data[0] <= 31 and data[1] == 10) or (
                    data[1] == 11 and 1 <= data[0] <= 22):

                znak = btns[7]

            elif (23 <= data[0] <= 30 and data[1] == 11) or (
                    data[1] == 12 and 1 <= data[0] <= 21):

                znak = btns[8]

            elif (22 <= data[0] <= 31 and data[1] == 12) or (
                    data[1] == 1 and 1 <= data[0] <= 20):

                znak = btns[9]

            elif (21 <= data[0] <= 31 and data[1] == 1) or (
                    data[1] == 2 and 1 <= data[0] <= 18):

                znak = btns[10]

            elif (19 <= data[0] <= 29 and data[1] == 2) or (
                    data[1] == 3 and 1 <= data[0] <= 20):

                znak = btns[11]

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton(text="–ú–µ–Ω—é‚Ü©")
            markup.add(btn1)
            bot.send_message(message.chat.id, f"–ê –≤—ã –∑–Ω–∞–ª–∏, —á—Ç–æ –í—ã {znak}?")
            BotDB.update_status(message.chat.id, "pass")
            BotDB.update_znak(message.chat.id, znak)
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9 —á–∞—Å–æ–≤ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø,"
                                              " —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è'",
                             reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ–Ω—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

    if BotDB.get_status(message.chat.id) == "menu":
        markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        btn1 = types.KeyboardButton(text="–ì–æ—Ä–æ—Å–∫–æ–ø—ãü™ê")
        btn2 = types.KeyboardButton(text="–ö—É—Ä—Å—ã –≤–∞–ª—é—Çüí∞")
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, "–í—ã –≤ –º–µ–Ω—é", reply_markup=markup)

    if BotDB.get_status(message.chat.id) == "horoscope":
        markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        btn1 = types.KeyboardButton(text=btns[0])
        btn2 = types.KeyboardButton(text=btns[1])
        btn3 = types.KeyboardButton(text=btns[2])
        btn4 = types.KeyboardButton(text=btns[3])
        btn5 = types.KeyboardButton(text=btns[4])
        btn6 = types.KeyboardButton(text=btns[5])
        btn7 = types.KeyboardButton(text=btns[6])
        btn8 = types.KeyboardButton(text=btns[7])
        btn9 = types.KeyboardButton(text=btns[8])
        btn10 = types.KeyboardButton(text=btns[9])
        btn11 = types.KeyboardButton(text=btns[10])
        btn12 = types.KeyboardButton(text=btns[11])
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9, btn10, btn11, btn12)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø",
                         reply_markup=markup)

    if BotDB.get_status(message.chat.id) == "curr":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        back = types.KeyboardButton(text="–ú–µ–Ω—é‚Ü©")
        markup.add(back)
        bot.send_message(message.chat.id,
                         f"""–î–æ–ª–ª–∞—Äüíµ: {get_currency()[0][0].text}, –∑–∞ –¥–µ–Ω—å: {get_currency()[0][1].text}
                         
–ï–≤—Ä–æüí∂: {get_currency()[1][0].text}, –∑–∞ –¥–µ–Ω—å: {get_currency()[1][1].text}""",
                         reply_markup=markup)
        BotDB.update_status(message.chat.id, "pass")


if __name__ == '__main__':
    bot.infinity_polling()
